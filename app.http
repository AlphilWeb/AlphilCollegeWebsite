# ### 1. Login to get auth token
# # @name login
# POST http://localhost:3000/auth/login
# Content-Type: application/json

# {
#   "email": "admin@test.com",
#   "password": "securepassword123"
# }

# ### Store the token from login response
# @authToken = {{login.response.body.token}}

# ### 2. Get current user profile (test auth)
# GET http://localhost:3000/users/profile
# Authorization: Bearer {{authToken}}

# ### 3. Get all users (admin only)
# GET http://localhost:3000/admin/users
# Authorization: Bearer {{authToken}}

# ### 4. Create new user (admin only)
# # @name createUser
# POST http://localhost:3000/admin/users
# Content-Type: application/json
# Authorization: Bearer {{authToken}}

# {
#   "name": "Test User",
#   "email": "test.user@example.com",
#   "password": "test1234",
#   "role": "admin"
# }

# ### Store the new user ID
# @newUserId = {{createUser.response.body.id}}

# ### 5. Get specific user (example - might need implementation)
# GET http://localhost:3000/admin/users/{{newUserId}}
# Authorization: Bearer {{authToken}}

# ### 6. Update user profile (non-admin)
# PATCH http://localhost:3000/users/profile
# Content-Type: application/json
# Authorization: Bearer {{authToken}}

# {
#   "name": "Updated Name"
# }

# ### 7. Delete user (admin only)
# DELETE http://localhost:3000/admin/users/{{newUserId}}
# Authorization: Bearer {{authToken}}

# ### 8. Attempt to create user with invalid data (should fail)
# POST http://localhost:3000/admin/users
# Content-Type: application/json
# Authorization: Bearer {{authToken}}

# {
#   "name": "",
#   "email": "not-an-email",
#   "password": "short"
# }

# ### 9. Attempt admin route without token (should fail)
# GET http://localhost:3000/admin/users

# ### 10. Attempt admin route with user role (should fail if not admin)
# GET http://localhost:3000/admin/users
# Authorization: Bearer {{authToken}}

# Base URL
@baseUrl = http://localhost:3000

### Health Check
GET {{baseUrl}}/health

### Get All Documents (Public)
GET {{baseUrl}}/documents

### Upload Document (Admin - Requires Auth)
POST {{baseUrl}}/documents
Content-Type: multipart/form-data; boundary=boundary
Authorization: Bearer {{admin_token}}

--boundary
Content-Disposition: form-data; name="file"; filename="fee-structure.pdf"
Content-Type: application/pdf

< ./path/to/your/fee-structure.pdf
--boundary--

### Delete Document (Admin - Requires Auth)
DELETE {{baseUrl}}/documents/1
Authorization: Bearer {{admin_token}}

### Access Uploaded File (Public)
GET {{baseUrl}}/documents/uploads/12345-fee-structure.pdf

### Example: Get Auth Token
# @name login
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "admin@test.com",
  "password": "securepassword123"
}

### Set token from login response
@admin_token = {{login.response.body.token}}